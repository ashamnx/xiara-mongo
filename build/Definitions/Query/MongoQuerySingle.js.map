{"version":3,"sources":["../source/Definitions/Query/MongoQuerySingle.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAA0C;AAG1C;IAAiE,oCAAa;IAA9E;;IA8BA,CAAC;IA5BA,+BAAI,GAAJ,UAAqC,WAAiF,EAAE,UAAmF;QAE1M,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,WAAW,EAAE,UAAU,CAAE,CAAC;IACpD,CAAC;IAED,gCAAK,GAAL,UAAuB,UAAiF;QAEvG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED,+BAAI,GAAJ;QAAA,iBAiBC;QAfA,MAAM,CAAC,IAAI,OAAO,CAAK,UAAC,OAAO,EAAE,MAAW;YAC3C,IAAI,KAAK,GAAiB,KAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBACvF,EAAE,CAAA,CAAC,KAAI,CAAC,MAAM,CAAC,CACf,CAAC;oBACA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACtB,CAAC;gBACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,CACT,CAAC;oBACA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACtB,CAAC;gBACD,IAAI,QAAQ,GAAM,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAS,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC/E,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAE,MAAM,CAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,uBAAC;AAAD,CA9BA,AA8BC,CA9BgE,uBAAU,GA8B1E;AA9BY,4CAAgB;AA8B5B,CAAC","file":"MongoQuerySingle.js","sourcesContent":["import { Db, Collection } from \"mongodb\";\nimport { MongoQuery } from \"./MongoQuery\";\nimport { MongoCollection } from \"../MongoCollection\";\n\nexport class MongoQuerySingle<T extends MongoCollection> extends MongoQuery<T>\n{\n\tthen<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>\n\t{\n\t\treturn this.exec().then( onfulfilled, onrejected );\n\t}\n\n\tcatch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>\n\t{\n\t\treturn this.exec().catch(onrejected);\n\t}\n\n\texec(): Promise<T>\n\t{\n\t\treturn new Promise<T>( (resolve, reject: any) => {\n\t\t\tlet query: Promise<any> = this.collection.getCollection().findOne(this.query).then((data) => {\n\t\t\t\tif(this.isLean)\n\t\t\t\t{\n\t\t\t\t\treturn resolve(data);\n\t\t\t\t}\n\t\t\t\tif(!data)\n\t\t\t\t{\n\t\t\t\t\treturn resolve(data);\n\t\t\t\t}\n\t\t\t\tvar instance: T = this.collection.constructCollection<T>(<any>this.collection);\n\t\t\t\tinstance.hydrate(data);\n\t\t\t\tresolve(instance);\n\t\t\t}).catch( reject );\n\t\t});\n\t}\n};"]}