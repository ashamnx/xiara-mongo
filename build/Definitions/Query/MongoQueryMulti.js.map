{"version":3,"sources":["../source/Definitions/Query/MongoQueryMulti.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAA0C;AAG1C;IAAgE,mCAAe;IAA/E;;IAgEA,CAAC;IA9DA,8BAAI,GAAJ,UAAqC,WAAmF,EAAE,UAAmF;QAE5M,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAE,WAAW,EAAE,UAAU,CAAE,CAAC;IACpD,CAAC;IAED,+BAAK,GAAL,UAAuB,UAAiF;QAEvG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED,8BAAI,GAAJ;QAAA,iBAoBC;QAlBA,MAAM,CAAC,IAAI,OAAO,CAAE,UAAC,OAAO,EAAE,MAAW;YACxC,EAAE,CAAA,CAAC,KAAI,CAAC,MAAM,CAAC,CACf,CAAC;gBACA,KAAI,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAA,KAAK;oBAClC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC;YACR,CAAC;YAED,KAAI,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAA,KAAK;gBAClC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAE,UAAA,QAAQ;oBAC1B,IAAI,QAAQ,GAAQ,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAS,KAAI,CAAC,UAAU,CAAC,CAAC;oBACjF,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC3B,MAAM,CAAC,QAAQ,CAAC;gBACjB,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,iCAAO,GAAP,UAAQ,QAAQ,EAAE,IAAK;QAAvB,iBA6BC;QA3BA,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC;QACrC,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CACf,CAAC;YACA,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAA,KAAK;gBAClC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACxB,EAAE,CAAA,CAAC,IAAI,CAAC,CACR,CAAC;oBACA,IAAI,EAAE,CAAC;gBACR,CAAC;YACF,CAAC,CAAC,CAAA;YACF,MAAM,CAAC;QACR,CAAC;QAED,MAAM,CAAC,IAAI,CAAE,UAAA,KAAK;YACjB,KAAK,CAAC,OAAO,CAAE,UAAA,IAAI;gBAClB,IAAI,QAAQ,GAAQ,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAS,KAAI,CAAC,UAAU,CAAC,CAAC;gBACjF,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACvB,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YACH,EAAE,CAAA,CAAC,IAAI,CAAC,CACR,CAAC;gBACA,IAAI,EAAE,CAAC;YACR,CAAC;QACF,CAAC,CAAC,CAAC;QAGH,WAAW;IACZ,CAAC;IACF,sBAAC;AAAD,CAhEA,AAgEC,CAhE+D,uBAAU,GAgEzE;AAhEY,0CAAe;AAgE3B,CAAC","file":"MongoQueryMulti.js","sourcesContent":["import { Db, Collection, Cursor, AggregationCursor } from \"mongodb\";\r\nimport { MongoQuery } from \"./MongoQuery\";\r\nimport { MongoCollection } from \"../MongoCollection\";\r\n\r\nexport class MongoQueryMulti<T extends MongoCollection> extends MongoQuery<T[]>\r\n{\r\n\tthen<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T[]) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>\r\n\t{\r\n\t\treturn this.exec().then( onfulfilled, onrejected );\r\n\t}\r\n\r\n\tcatch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T[] | TResult>\r\n\t{\r\n\t\treturn this.exec().catch(onrejected);\r\n\t}\r\n\r\n\texec(): Promise<T[]>\r\n\t{\r\n\t\treturn new Promise( (resolve, reject: any) => {\r\n\t\t\tif(this.isLean)\r\n\t\t\t{\r\n\t\t\t\tthis.cursor().toArray().then( array => {\r\n\t\t\t\t\tresolve(array);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.cursor().toArray().then( array => {\r\n\t\t\t\tresolve(array.map( document => {\r\n\t\t\t\t\tlet instance: any = this.collection.constructCollection<T>(<any>this.collection);\r\n\t\t\t\t\tinstance.hydrate(document);\r\n\t\t\t\t\treturn instance;\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t}\r\n\r\n\tforEach(callback, done?)\r\n\t{\r\n\t\tlet cursor = this.cursor().toArray();\r\n\t\tif(this.isLean)\r\n\t\t{\r\n\t\t\tthis.cursor().toArray().then( array => {\r\n\t\t\t\tarray.forEach(callback);\r\n\t\t\t\tif(done)\r\n\t\t\t\t{\r\n\t\t\t\t\tdone();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tcursor.then( array => {\r\n\t\t\tarray.forEach( data => {\r\n\t\t\t\tvar instance: any = this.collection.constructCollection<T>(<any>this.collection);\r\n\t\t\t\tinstance.hydrate(data);\r\n\t\t\t\tcallback(instance);\r\n\t\t\t});\r\n\t\t\tif(done)\r\n\t\t\t{\r\n\t\t\t\tdone();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t//cursor.to\r\n\t}\r\n};"]}