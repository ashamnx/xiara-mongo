{"version":3,"sources":["../source/Definitions/Query/MongoQuery.ts"],"names":[],"mappings":"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","file":"MongoQuery.js","sourcesContent":["import { Db, Collection, AggregationCursor, AggregationCursorResult, CollectionAggregationOptions, MongoCallback, ObjectID } from \"mongodb\";\nimport { MongoCollection } from \"../MongoCollection\";\nimport { MongoSchemaRegistry } from \"../MongoSchemaRegistry\";\nexport class MongoQuery<T>\n{\n\tpublic isLean: boolean = false;\n\tpublic isNatural: boolean = false;\n\tpublic pipeline = [];\n\tpublic populatedFields:any[] = [];\n\tconstructor(public collection: typeof MongoCollection, public query?: any)\n\t{\n\t\tif(query != null)\n\t\t{\n\t\t\tthis.where(query);\n\t\t}\n\t}\n\n\tlean(isLean = true): this\n\t{\n\t\tthis.isLean = isLean;\n\t\treturn this;\n\t}\n\n\twhere(clause?: any): this\n\t{\n\t\tthis.pipeline.push({\n\t\t\t$match: clause,\n\t\t});\n\t\treturn this;\n\t}\n\n\tgt(clause?: object): this\n\t{\n\t\tlet fields = Object.keys(clause);\n\t\tvar query = {};\n\t\tfor(let f of fields)\n\t\t{\n\t\t\tquery[f] = {\n\t\t\t\t$gt: clause[f]\n\t\t\t};\n\t\t}\n\t\treturn this.where(query);\n\t}\n\n\n\tgte(clause?: object): this\n\t{\n\t\tlet fields = Object.keys(clause);\n\t\tvar query = {};\n\t\tfor(let f of fields)\n\t\t{\n\t\t\tquery[f] = {\n\t\t\t\t$gte: clause[f]\n\t\t\t};\n\t\t}\n\t\treturn this.where(query);\n\t}\n\n\n\tlt(clause?: object): this\n\t{\n\t\tlet fields = Object.keys(clause);\n\t\tvar query = {};\n\t\tfor(let f of fields)\n\t\t{\n\t\t\tquery[f] = {\n\t\t\t\t$lt: clause[f]\n\t\t\t};\n\t\t}\n\t\treturn this.where(query);\n\t}\n\n\n\tlte(clause?: object): this\n\t{\n\t\tlet fields = Object.keys(clause);\n\t\tvar query = {};\n\t\tfor(let f of fields)\n\t\t{\n\t\t\tquery[f] = {\n\t\t\t\t$lte: clause[f]\n\t\t\t};\n\t\t}\n\t\treturn this.where(query);\n\t}\n\n\tskip(skip:number = 0): this\n\t{\n\t\tthis.pipeline.push({\n\t\t\t$skip: skip\n\t\t});\n\t\treturn this;\n\t}\n\n\tsort(clause?: object): this\n\t{\n\t\tthis.pipeline.push({\n\t\t\t$sort: clause\n\t\t});\n\t\treturn this;\n\t}\n\n\tlimit(limit:number = 0): this\n\t{\n\t\tthis.pipeline.push({\n\t\t\t$limit: limit\n\t\t});\n\t\treturn this;\n\t}\n\n\tpopulate(...fields:string[]): this\n\t{\n\n\t\tlet schema = this.collection.getSchema();\n\n\t\tfor(var field of fields)\n\t\t{\n\t\t\tif(this.populatedFields.indexOf(field) >= 0)\n\t\t\t\tcontinue;\n\n\t\t\tlet localField = schema.findField(field);\n\t\t\tif(!localField.options || !localField.options.reference)\n\t\t\t\tcontinue;\n\n\t\t\tlet foreignSchema = localField.options.reference.getSchema();\n\t\t\tlet foreignField = foreignSchema.findField(localField.options.by || \"_id\");\n\n\t\t\tthis.pipeline.push({\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: foreignSchema.name,\n\t\t\t\t\tlocalField: localField.name,\n\t\t\t\t\tforeignField: foreignField.name,\n\t\t\t\t\tas: localField.name,\n\t\t\t\t}\n\t\t\t});\n            this.pipeline.push({\n                $unwind: \"$\" + localField.name,\n            });\n\t\t\tthis.populatedFields.push(localField.name);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcast<U>(): MongoQuery<U>\n\t{\n\t\treturn null;\n\t}\n\n    aggregate(pipeline: any[] = [], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>\n\t{\n\t\treturn this.collection.getCollection().aggregate<any>(pipeline);\n\t}\n\n\tcursor(cursorOptions?: { batchSize: number }, explain?: boolean): AggregationCursor<any>\n\t{\n\t\tlet schema = this.collection.getSchema();\n\t\tlet populateFields = schema.fields.filter( field => field.options.autoPopulate);\n\t\tthis.populate.apply(this, populateFields.map(field => field.name));\n\t\treturn this.aggregate(this.pipeline, {\n\t\t\tcursor: cursorOptions,\n\t\t\texplain: explain,\n\t\t});\n\t}\n\n\n}"]}