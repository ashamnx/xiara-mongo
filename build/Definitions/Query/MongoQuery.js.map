{"version":3,"sources":["../source/Definitions/Query/MongoQuery.ts"],"names":[],"mappings":"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","file":"MongoQuery.js","sourcesContent":["import { Db, Collection, AggregationCursor, AggregationCursorResult, CollectionAggregationOptions, MongoCallback, ObjectID } from \"mongodb\";\r\nimport { MongoCollection } from \"../MongoCollection\";\r\nimport { MongoSchemaRegistry } from \"../MongoSchemaRegistry\";\r\nexport class MongoQuery<T>\r\n{\r\n\tpublic isLean: boolean = false;\r\n\tpublic pipeline = [];\r\n\tpublic populatedFields:any[] = [];\r\n\tconstructor(public collection: typeof MongoCollection, public query?: any)\r\n\t{\r\n\t\tif(query != null)\r\n\t\t{\r\n\t\t\tthis.where(query);\r\n\t\t}\r\n\t}\r\n\r\n\tlean(isLean = true): this\r\n\t{\r\n\t\tthis.isLean = isLean;\r\n\t\treturn this;\r\n\t}\r\n\r\n\twhere(clause?: any): this\r\n\t{\r\n\t\tthis.pipeline.push({\r\n\t\t\t$match: clause,\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tgt(clause?: object): this\r\n\t{\r\n\t\tlet fields = Object.keys(clause);\r\n\t\tvar query = {};\r\n\t\tfor(let f of fields)\r\n\t\t{\r\n\t\t\tquery[f] = {\r\n\t\t\t\t$gt: clause[f]\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this.where(query);\r\n\t}\r\n\t\r\n\t\r\n\tgte(clause?: object): this\r\n\t{\r\n\t\tlet fields = Object.keys(clause);\r\n\t\tvar query = {};\r\n\t\tfor(let f of fields)\r\n\t\t{\r\n\t\t\tquery[f] = {\r\n\t\t\t\t$gte: clause[f]\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this.where(query);\r\n\t}\r\n\r\n\t\r\n\tlt(clause?: object): this\r\n\t{\r\n\t\tlet fields = Object.keys(clause);\r\n\t\tvar query = {};\r\n\t\tfor(let f of fields)\r\n\t\t{\r\n\t\t\tquery[f] = {\r\n\t\t\t\t$lt: clause[f]\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this.where(query);\r\n\t}\r\n\r\n\t\r\n\tlte(clause?: object): this\r\n\t{\r\n\t\tlet fields = Object.keys(clause);\r\n\t\tvar query = {};\r\n\t\tfor(let f of fields)\r\n\t\t{\r\n\t\t\tquery[f] = {\r\n\t\t\t\t$lte: clause[f]\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this.where(query);\r\n\t}\r\n\r\n\tskip(skip:number = 0): this\r\n\t{\r\n\t\tthis.pipeline.push({\r\n\t\t\t$skip: skip\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tlimit(limit:number = 0): this\r\n\t{\r\n\t\tthis.pipeline.push({\r\n\t\t\t$limit: limit\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpopulate(...fields:string[]): this\r\n\t{\r\n\t\t\r\n\t\tlet schema = this.collection.getSchema();\r\n\t\t\r\n\t\tfor(var field of fields)\r\n\t\t{\r\n\t\t\tif(this.populatedFields.indexOf(field) >= 0)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconsole.log(\"populating field:\", field);\r\n\r\n\t\t\tlet localField = schema.findField(field);\r\n\t\t\tif(!localField.options || !localField.options.reference)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tlet foreignSchema = localField.options.reference.getSchema();\r\n\t\t\tlet foreignField = foreignSchema.findField(localField.options.by || \"_id\");\r\n\t\t\t\r\n\t\t\tthis.pipeline.push({\r\n\t\t\t\t$lookup: {\r\n\t\t\t\t\tfrom: foreignSchema.name,\r\n\t\t\t\t\tlocalField: localField.name,\r\n\t\t\t\t\tforeignField: foreignField.name,\r\n\t\t\t\t\tas: localField.name,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.pipeline.push({\r\n\t\t\t\t$unwind: \"$\" + localField.name,\r\n\t\t\t});\r\n\t\t\tthis.populatedFields.push(localField.name);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcast<U>(): MongoQuery<U>\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\r\n\r\n\taggregate(pipeline: any[] = [], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor<any>\r\n\t{\r\n\t\treturn this.collection.getCollection().aggregate<any>(pipeline);\r\n\t}\r\n\r\n\tcursor(cursorOptions?: { batchSize: number }, explain?: boolean): AggregationCursor<any>\r\n\t{\r\n\t\tlet schema = this.collection.getSchema();\r\n\t\tlet populateFields = schema.fields.filter( field => field.options.autoPopulate);\r\n\t\tthis.populate.apply(this, populateFields.map(field => field.name));\r\n\t\treturn this.aggregate(this.pipeline, {\r\n\t\t\tcursor: cursorOptions,\r\n\t\t\texplain: explain,\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\r\n};"]}