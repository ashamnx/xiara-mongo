{"version":3,"sources":["../source/Definitions/MongoCollection.ts"],"names":[],"mappings":"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","file":"MongoCollection.js","sourcesContent":["import {IProperty, MongoSchema} from './MongoSchema';\nimport {Property} from './Decorators';\nimport {MongoQuery, MongoQueryMulti, MongoQuerySingle} from './Query';\nimport {\n    AggregationCursor,\n    Collection,\n    CollectionInsertOneOptions,\n    CollStats,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    ObjectId,\n    ReplaceOneOptions,\n    UpdateWriteOpResult,\n    WriteOpResult\n} from 'mongodb';\n//import { IFindQuery } \"./FindQuery\";\nimport {MongoSchemaRegistry} from './MongoSchemaRegistry';\nimport {ObjectID} from 'bson';\n\nexport interface ICollection {\n    getSchemaDefinition(): MongoSchema;\n};\n\nexport class MongoCollection implements ICollection {\n\n    @Property()\n    _id: ObjectId;\n\n    //_version: number;\n\n    constructor(data: any = null) {\n        if (data != null) {\n            this.hydrate(data);\n        }\n    }\n\n    static constructCollection<T>(type: new () => T): T {\n        return new type();\n    }\n\n    static query<T extends MongoCollection>(query?: Object): MongoQuery<T> {\n        MongoCollection.sanitizeQuery(query);\n        return new MongoQuery<T>(this, query);\n    }\n\n    static find<T extends MongoCollection>(query?: Object): MongoQueryMulti<T> {\n        MongoCollection.sanitizeQuery(query);\n        return new MongoQueryMulti<T>(this, query);\n    }\n\n    static findOne<T extends MongoCollection>(query?: Object): MongoQuerySingle<T> {\n        MongoCollection.sanitizeQuery(query);\n        return new MongoQuerySingle<T>(this, query);\n    }\n\n    static count<T extends MongoCollection>(query?: Object): Promise<number> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.countDocuments(query);\n    }\n\n    static findLast<T extends MongoCollection>(query?: Object): MongoQuerySingle<T> {\n        console.log('query::::', query);\n        MongoCollection.sanitizeQuery(query);\n        return new MongoQuerySingle<T>(this, query);\n    }\n\n    static createOne<T extends MongoCollection>(data?: Object): Promise<T> {\n        let instance: T = this.constructCollection<T>(<any>this);\n        instance.hydrate(data);\n        return instance.save();\n    }\n\n    static findOneAndUpdate<T extends MongoCollection>(query?: Object, data?: Object, options: FindOneAndReplaceOption = undefined): Promise<FindAndModifyWriteOpResultObject> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.findOneAndUpdate(query, {\n            $set: data\n        }, options).then(result => {\n            if (options && options.returnOriginal) {\n                return result.value;\n            }\n            return result;\n        }).catch(error => {\n            return error;\n        });\n    }\n\n    static findByIdAndUpdate<T extends MongoCollection>(_id?: Object, data?: Object): Promise<FindAndModifyWriteOpResultObject> {\n        MongoCollection.sanitizeQuery(_id);\n        let collection = this.getSchema().collection();\n        return collection.findOneAndUpdate({_id: _id}, data).then(result => {\n            return result;\n        }).catch(error => {\n            return error;\n        });\n    }\n\n    static updateOne<T extends MongoCollection>(query?: Object, data?: Object, options: ReplaceOneOptions = undefined): Promise<UpdateWriteOpResult> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.updateOne(query, {\n            $set: data\n        }, options);\n    }\n\n    static update<T extends MongoCollection>(query?: Object, data?: Object, options: ReplaceOneOptions & { multi?: boolean } = undefined): Promise<WriteOpResult> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.update(query, {\n            $set: data\n        }, options);\n    }\n\n    static updateMany<T extends MongoCollection>(query?: Object, data?: Object, options: ReplaceOneOptions & { multi?: boolean } = undefined): Promise<UpdateWriteOpResult> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.updateMany(query, data, options);\n    }\n\n    static remove(query: Object): Promise<WriteOpResult> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.remove(query);\n    }\n\n    static removeOne(query: Object): Promise<WriteOpResult> {\n        MongoCollection.sanitizeQuery(query);\n        let collection = this.getSchema().collection();\n        return collection.remove(query, {single: true});\n    }\n\n    static aggregate<T extends MongoCollection>(pipeline: any[] = []): AggregationCursor<T> {\n        return this.getCollection().aggregate(pipeline);\n    }\n\n    static getSchema(): MongoSchema {\n        return MongoSchemaRegistry.getSchema(this.name);\n    }\n\n    static getCollection(): Collection<any> {\n        return this.getSchema().collection();\n    }\n\n    static stats(): Promise<CollStats> {\n        return this.getCollection().stats();\n    }\n\n    private static sanitizeQuery(query: any) {\n        if (query && query._id && typeof query._id === 'string') {\n            query._id = new ObjectID(query._id);\n        }\n    }\n\n    hydrate(data: any) {\n        if (!data)\n            return;\n\n        let schema = this.getSchemaDefinition();\n        for (let field of schema.fields) {\n            if (field.options) {\n                if (data[field.name] === undefined && field.options.default !== undefined) {\n                    if (field.options.default.name == 'Date') {\n                        this[field.name] = new field.options.default();\n                        continue;\n                    }\n\n                    if (typeof field.options.default === 'function') {\n                        this[field.name] = field.options.default();\n                        continue;\n                    }\n                    this[field.name] = field.options.default;\n                    continue;\n                }\n\n                if (data[field.name] && field.options.reference && typeof data[field.name] === 'object') {\n                    let referencedCollection = new field.options.reference();\n                    referencedCollection.hydrate(data[field.name]);\n                    this[field.name] = referencedCollection;\n                    continue;\n                }\n            }\n            this[field.name] = data[field.name];\n        }\n    }\n\n    dehydrate(fields: IProperty[], dropReferences: boolean = false): object {\n        let rawData = {};\n        for (let field of fields) {\n            if (field.options.reference && dropReferences) {\n                if (this[field.name] === undefined || this[field.name] === null)\n                    continue;\n\n                rawData[field.name] = this[field.name][field.options.by || '_id'];\n                continue;\n            }\n\n            if ((this[field.name] === undefined || this[field.name] === null) && field.options.default !== undefined) {\n                if (field.options.default.name == 'Date') {\n                    rawData[field.name] = new field.options.default();\n                    continue;\n                }\n\n                if (typeof field.options.default === 'function') {\n                    rawData[field.name] = field.options.default();\n                    continue;\n                } else {\n                    rawData[field.name] = field.options.default;\n                }\n            } else {\n                rawData[field.name] = this[field.name];\n            }\n\n        }\n        return rawData;\n    }\n\n    toMongoStore() {\n        let schema = this.getSchemaDefinition();\n        return this.dehydrate(schema.fields, true);\n    }\n\n    toObject(): object {\n        let schema = this.getSchemaDefinition();\n        return this.dehydrate(schema.fields);\n    }\n\n    // Same as dehydrate but drops the hidden fields\n    toJSON() {\n        let schema = this.getSchemaDefinition();\n        return this.dehydrate(schema.getVisibleFields());\n    }\n\n    getValidatedObject(): object {\n        let schema = this.getSchemaDefinition();\n        let collection = schema.collection();\n        let data = this.toObject();\n        let validationResult = schema.validate(data);\n        if (!validationResult) {\n            return null;\n        }\n        return data;\n    }\n\n    collection(): Collection<any> {\n        return this.getSchemaDefinition().collection();\n    }\n\n    getSchemaDefinition(): MongoSchema {\n        return MongoSchemaRegistry.getSchema(this.constructor.name);\n        //return (<any>this.constructor).SchemaDefinition;\n    }\n\n    save(options: any = {}): Promise<any> {\n        if (!this._id) {\n            return this.insert(options);\n        } else {\n            return this.update(options);\n        }\n    }\n\n    insert(options: CollectionInsertOneOptions = undefined): Promise<this> {\n        let schema = this.getSchemaDefinition();\n        let collection = schema.collection();\n        let data = this.toMongoStore();\n        let validationResult = schema.validate(data);\n        if (!validationResult) {\n            return collection.insertOne(data, options).then(result => {\n                this._id = result.insertedId; // Assign inserted _id\n                return this;\n            });\n        }\n        return Promise.reject(validationResult);\n    }\n\n    update(options: ReplaceOneOptions = undefined): Promise<this> {\n        let schema = this.getSchemaDefinition();\n        let collection = schema.collection();\n        let data = this.toMongoStore();\n        let validationResult = schema.validate(data);\n        if (!validationResult) {\n            return collection.updateOne({\n                _id: this._id,\n            }, {\n                $set: data\n            }, options).then(result => {\n                return this;\n            });\n        }\n        return Promise.reject(validationResult);\n    }\n\n    remove(): Promise<any> {\n        if (!this._id) {\n            return Promise.reject('_id is not defined');\n        }\n\n        return this.collection().deleteOne({\n            _id: this._id\n        });\n    }\n\n    replace(replaceWith: MongoCollection): Promise<WriteOpResult> {\n        let schema = replaceWith.getSchemaDefinition();\n        let collection = schema.collection();\n        let data = replaceWith.toMongoStore();\n        let validationResult = schema.validate(data);\n        if (!validationResult) {\n            return this.collection().replaceOne({_id: this._id}, data);\n        }\n        return Promise.reject(validationResult);\n    }\n};"]}