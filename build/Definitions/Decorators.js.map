{"version":3,"sources":["../source/Definitions/Decorators.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,6CAA2E;AAC3E,6DAA0D;AAE1D,SAAS,uBAAuB,CAAC,MAAW;IACxC,IAAI,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC3C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QACzB,OAAO,EAAE,CAAC;KACb;IACD,IAAI,UAAU,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACjD,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3B,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,SAAgB,KAAK,CAAC,IAAY,EAAE,OAAuB,EAAE,aAAuC;IAChG,OAAO,UAAU,MAAW;QACxB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC1B,MAAM,CAAC,gBAAgB,GAAG,IAAI,yBAAW,CAAC,MAAM,CAAC,CAAC;SACrD;QAED,IAAI,OAAO,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,MAAM,GAAgB,yCAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,IAAI,yBAAW,CAAC,MAAM,CAAC,CAAC;YACjC,yCAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SACrD;QAED,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC;QACrC,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,OAAO;YACR,OAAO;QAEX,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,KAAkB,UAAe,EAAf,KAAA,OAAO,CAAC,OAAO,EAAf,cAAe,EAAf,IAAe,EAAE;gBAA9B,IAAI,KAAK,SAAA;gBACV,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC1B;SACJ;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvD,qDAAqD;SACxD;IACL,CAAC,CAAC;AACN,CAAC;AA9BD,sBA8BC;AAED,SAAgB,QAAQ,CAAC,YAAmC;IAAnC,6BAAA,EAAA,iBAAmC;IACxD,OAAO,UAAU,MAAW,EAAE,GAAW;QACrC,IAAI,MAAM,GAAgB,yCAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,IAAI,yBAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC7C,yCAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SACjE;QACD,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;IACxF,CAAC,CAAC;AACN,CAAC;AATD,4BASC;AAED,SAAgB,IAAI,CAAC,QAAgB;IACjC,OAAO,UAAU,MAAW,EAAE,GAAW;QACrC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC1B,MAAM,CAAC,gBAAgB,GAAG,IAAI,yBAAW,CAAC,MAAM,CAAC,CAAC;SACrD;QACD,IAAI,MAAM,GAAgB,MAAM,CAAC,gBAAgB,CAAC;QAClD,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;AACN,CAAC;AARD,oBAQC","file":"Decorators.js","sourcesContent":["import 'reflect-metadata';\nimport {CollectionCreateOptions} from 'mongodb';\nimport {IModelOptions, IPropertyOptions, MongoSchema} from './MongoSchema';\nimport {MongoSchemaRegistry} from './MongoSchemaRegistry';\n\nfunction resolveParentInheritors(target: any): any[] {\n    let parent = Object.getPrototypeOf(target);\n    if (!parent || !parent.name) {\n        return [];\n    }\n    let inheritors = resolveParentInheritors(parent);\n    inheritors.unshift(parent);\n    return inheritors;\n}\n\nexport function Model(name: string, options?: IModelOptions, createOptions?: CollectionCreateOptions) {\n    return function (target: any) {\n        if (!target.SchemaDefinition) {\n            target.SchemaDefinition = new MongoSchema(target);\n        }\n\n        let parents = resolveParentInheritors(target);\n        let schema: MongoSchema = MongoSchemaRegistry.getSchema(target.name);\n        if (!schema) {\n            schema = new MongoSchema(target);\n            MongoSchemaRegistry.register(target.name, schema);\n        }\n\n        schema.name = name;\n        schema.createOptions = createOptions;\n        schema.inherits = parents;\n        if (!options)\n            return;\n\n        if (options.indexes) {\n            for (let index of options.indexes) {\n                schema.addIndex(index);\n            }\n        }\n\n        if (options.inherits) {\n            schema.inherits.push.prototype.apply(options.inherits);\n            //schema.inherits = options.inherits.concat(parents);\n        }\n    };\n}\n\nexport function Property(fieldOptions: IPropertyOptions = {}) {\n    return function (target: any, key: string) {\n        let schema: MongoSchema = MongoSchemaRegistry.getSchema(target.constructor.name);\n        if (!schema) {\n            schema = new MongoSchema(target.constructor);\n            MongoSchemaRegistry.register(target.constructor.name, schema);\n        }\n        schema.addField(key, Reflect.getMetadata('design:type', target, key), fieldOptions);\n    };\n}\n\nexport function Hook(hookName: string) {\n    return function (target: any, key: string) {\n        if (!target.SchemaDefinition) {\n            target.SchemaDefinition = new MongoSchema(target);\n        }\n        let schema: MongoSchema = target.SchemaDefinition;\n        schema.registerHook(hookName, target[key]);\n    };\n}\n\n"]}