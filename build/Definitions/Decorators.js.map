{"version":3,"sources":["../source/Definitions/Decorators.ts"],"names":[],"mappings":"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","file":"Decorators.js","sourcesContent":["import \"reflect-metadata\";\nimport { CollectionCreateOptions } from \"mongodb\";\nimport { MongoSchema, IModelOptions, IPropertyOptions, IPropertyIndex } from \"./MongoSchema\";\nimport { MongoSchemaRegistry } from \"./MongoSchemaRegistry\";\n\nfunction resolveParentInheritors(target: any): any[]\n{\n\tlet parent = Object.getPrototypeOf(target);\n\tif(!parent || !parent.name)\n\t{\n\t\treturn [];\n\t}\n\tlet inheritors = resolveParentInheritors(parent);\n\tinheritors.unshift(parent);\n\treturn inheritors;\n}\n\nexport function Model(name: string, options?: IModelOptions, createOptions?: CollectionCreateOptions)\n{\n\treturn function(target: any)\n\t{\n\t\tif(!target.SchemaDefinition)\n\t\t{\n\t\t\ttarget.SchemaDefinition = new MongoSchema(target);\n\t\t}\n\t\t\n\n\t\tlet parents = resolveParentInheritors(target);\n\t\tlet schema:MongoSchema = MongoSchemaRegistry.getSchema(target.name);\n\t\tif(!schema)\n\t\t{\n\t\t\tschema = new MongoSchema(target);\n\t\t\tMongoSchemaRegistry.register(target.name, schema);\n\t\t}\n\n\t\tschema.name = name;\n\t\tschema.createOptions = createOptions;\n\t\tschema.inherits = parents;\n\t\tif(!options)\n\t\t\treturn;\n\t\t\t\n\t\tif(options.indexes)\n\t\t{\n\t\t\tfor(let index of options.indexes)\n\t\t\t{\n\t\t\t\tschema.addIndex(index);\n\t\t\t}\n\t\t}\n\n\t\tif(options.inherits)\n\t\t{\n\t\t\tschema.inherits.push.prototype.apply(options.inherits);\n\t\t\t//schema.inherits = options.inherits.concat(parents);\n\t\t}\n\t}\n};   \n\nexport function Property(fieldOptions: IPropertyOptions={})\n{\n\treturn function(target: any, key: string)\n\t{\t\n\t\tlet schema:MongoSchema = MongoSchemaRegistry.getSchema(target.constructor.name);\n\t\tif(!schema)\n\t\t{\n\t\t\tschema = new MongoSchema(target.constructor);\n\t\t\tMongoSchemaRegistry.register(target.constructor.name, schema);\n\t\t}\n\t\tschema.addField(key, Reflect.getMetadata(\"design:type\", target, key), fieldOptions);\n\t}\n};\n\nexport function Hook(hookName: string)\n{\n\treturn function(target: any, key: string)\n\t{\n\t\tif(!target.SchemaDefinition)\n\t\t{\n\t\t\ttarget.SchemaDefinition = new MongoSchema(target);\n\t\t}\n\t\tlet schema:MongoSchema = target.SchemaDefinition;\n\t\tschema.registerHook(hookName, target[key]);\n\t}\n};\n\n"]}