{"version":3,"sources":["../source/Definitions/MongoSchema.ts"],"names":[],"mappings":"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","file":"MongoSchema.js","sourcesContent":["import { Db, ObjectId, Collection, CollectionCreateOptions } from \"mongodb\";\r\nimport { SchemaValidator, SchemaValidationResult } from \"./Schema\";\r\nimport { MongoCollection, ICollection } from \"./MongoCollection\";\r\n\r\nexport interface IPropertyOptions\r\n{\r\n\tname?: string; // Name of the property\r\n\trequired?: boolean; // Is the property required?\r\n\tunique?: boolean; // Is the field unique?\r\n\thidden?: boolean; // Should the field visible when converted toJSON?\r\n\tindex?: -1 | 0 | 1; // Is the field indexed?\r\n\treference?: typeof MongoCollection; // Populate this field with another field (ObjectId)\r\n\tby?: string; // Reference from the other collection by this field\r\n\tautoPopulate?: boolean;\r\n\tdefault?: any; // default value\r\n\ttype?: any; // Type of the field (Override)\r\n};\r\n\r\nexport interface IPropertyIndex\r\n{\r\n\tspecification: object;\r\n\tunique: boolean,\r\n};\r\n\r\n\r\nexport interface IProperty\r\n{\r\n\tname: string;\r\n\ttype: any;\r\n\toptions: IPropertyOptions;\r\n};\r\n\r\nexport interface IModelOptions\r\n{\r\n\tindexes?: IPropertyIndex[];\r\n\tinherits?: any[]\r\n}\r\n\r\nexport class MongoSchema\r\n{\r\n\tpublic name: string;\r\n\tpublic indexes: IPropertyIndex[] = [];\r\n\tpublic fields: IProperty[] = [];\r\n\tprotected  DB: Db;\r\n\tpublic createOptions: CollectionCreateOptions;\r\n\tpublic hooks: any = {};\r\n\tpublic inherits: typeof MongoCollection[] = [];\r\n\r\n\tconstructor(public CollectionSpec: any)\r\n\t{\r\n\t//\tthis.addField(\"_id\", ObjectId, {});\r\n\r\n\t\t// this.addField(\"_version\", Number, {\r\n\t\t// \tdefault: 0,\r\n\t\t// });\r\n\t}\r\n\r\n\taddField(fieldName: string, fieldType: any, fieldOptions: IPropertyOptions)\r\n\t{\r\n\t\tif(fieldOptions.index !== undefined || fieldOptions.unique !== undefined )\r\n\t\t{\r\n\t\t\tvar index: IPropertyIndex = {\r\n\t\t\t\tspecification: {},\r\n\t\t\t\tunique: fieldOptions.unique,\r\n\t\t\t};\r\n\t\t\tindex.specification[fieldName] = fieldOptions.index || 1;\r\n\t\t\tthis.addIndex(index);\r\n\t\t}\r\n\r\n\t\tif(fieldOptions.type !== undefined)\r\n\t\t{\r\n\t\t\tfieldType = fieldOptions.type;\r\n\t\t}\r\n\r\n\t\tthis.fields.push({\r\n\t\t\tname: fieldName,\r\n\t\t\ttype: fieldType.name,\r\n\t\t\toptions: fieldOptions,\r\n\t\t});\r\n\t}\r\n\r\n\tgetHiddenFields()\r\n\t{\r\n\t\treturn this.callHook(\"fields:hidden\", this.fields.filter( field => field.options.hidden));\r\n\t}\r\n\r\n\tgetVisibleFields()\r\n\t{\r\n\t\treturn this.callHook(\"fields:visible\", this.fields.filter( field => !field.options.hidden ));\r\n\t}\r\n\r\n\taddIndex(index: IPropertyIndex)\r\n\t{\r\n\t\tthis.indexes.push(index);\r\n\t}\r\n\r\n\tsetConnection(db: Db)\r\n\t{\r\n\t\tthis.DB = db;\r\n\t\tthis.callHook(\"db:connected\");\r\n\t}\r\n\r\n\tfindField(name: string)\r\n\t{\r\n\t\treturn this.fields.find( field => {\r\n\t\t\tif(field.name == name)\r\n\t\t\t\treturn true;\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}\r\n\r\n\tprepare()\r\n\t{\r\n\t\t\r\n\t\tfor(let inherited of this.inherits)\r\n\t\t{\r\n\t\t\tlet inheritedSchema:MongoSchema = inherited.getSchema();\r\n\t\t\tfor(let inheritedField of inheritedSchema.fields)\r\n\t\t\t{\r\n\t\t\t\t// Skip fields. We allow overrides this way?\r\n\t\t\t\tif(this.findField(inheritedField.name))\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\tthis.fields.unshift(inheritedField);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcollection(): Collection<any>\r\n\t{\r\n\t\treturn this.DB.collection(this.name);\r\n\t}\r\n\r\n\tcreateCollection()\r\n\t{\r\n\t\tthis.DB.createCollection(this.name, this.createOptions).then( result => {\r\n\t\t\tthis.callHook(\"collection:created\");\r\n\t\t\tfor(let index of this.indexes)\r\n\t\t\t{\r\n\t\t\t\tthis.collection().createIndex(index.specification, {\r\n\t\t\t\t\tunique: index.unique,\r\n\t\t\t\t\tdropDups: true,\r\n\t\t\t\t\tw: 1\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.callHook(\"indexes:created\");\r\n\t\t});\r\n\t}\r\n\r\n\tregisterHook(hookName: string, callback: any)\r\n\t{\r\n\t\tthis.hooks[hookName] = callback;\r\n\t}\r\n\r\n\tcallHook(hookName: string, input?: any)\r\n\t{\r\n\t\tif(this.hooks[hookName])\r\n\t\t{\r\n\t\t\treturn this.hooks[hookName](input);\r\n\t\t}\r\n\t\treturn input;\r\n\t}\r\n\r\n\tvalidate(document: object): SchemaValidationResult\r\n\t{\r\n\t\tlet validatingDocument = this.callHook(\"validate\", document);\r\n\t\tfor(var field of this.fields)\r\n\t\t{\r\n\t\t\tvar error = SchemaValidator.validateField(field, validatingDocument[field.name]);\r\n\t\t\tif(error)\r\n\t\t\t{\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//SchemaValidator.ValidateDocument(document, this);\r\n\t}\r\n\r\n};"]}