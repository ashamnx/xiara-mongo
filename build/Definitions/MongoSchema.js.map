{"version":3,"sources":["../source/Definitions/MongoSchema.ts"],"names":[],"mappings":"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","file":"MongoSchema.js","sourcesContent":["import {Collection, CollectionCreateOptions, Db} from 'mongodb';\nimport {SchemaValidationResult, SchemaValidator} from './Schema';\nimport {MongoCollection} from './MongoCollection';\n\nexport interface IPropertyOptions {\n    name?: string; // Name of the property\n    required?: boolean; // Is the property required?\n    unique?: boolean; // Is the field unique?\n    hidden?: boolean; // Should the field visible when converted toJSON?\n    index?: -1 | 0 | 1; // Is the field indexed?\n    reference?: typeof MongoCollection; // Populate this field with another field (ObjectId)\n    by?: string; // Reference from the other collection by this field\n    autoPopulate?: boolean;\n    default?: any; // default value\n    type?: any; // Type of the field (Override)\n};\n\nexport interface IPropertyIndex {\n    specification: object;\n    unique: boolean,\n};\n\n\nexport interface IProperty {\n    name: string;\n    type: any;\n    options: IPropertyOptions;\n};\n\nexport interface IModelOptions {\n    indexes?: IPropertyIndex[];\n    inherits?: any[],\n    log\n}\n\nexport class MongoSchema {\n    public name: string;\n    public indexes: IPropertyIndex[] = [];\n    public fields: IProperty[] = [];\n    public createOptions: CollectionCreateOptions;\n    public hooks: any = {};\n    public inherits: typeof MongoCollection[] = [];\n    protected DB: Db;\n\n    constructor(public CollectionSpec: any) {\n        //\tthis.addField(\"_id\", ObjectId, {});\n\n        // this.addField(\"_version\", Number, {\n        // \tdefault: 0,\n        // });\n    }\n\n    addField(fieldName: string, fieldType: any, fieldOptions: IPropertyOptions) {\n        if (fieldOptions.index !== undefined || fieldOptions.unique !== undefined) {\n            var index: IPropertyIndex = {\n                specification: {},\n                unique: fieldOptions.unique,\n            };\n            index.specification[fieldName] = fieldOptions.index || 1;\n            this.addIndex(index);\n        }\n\n        if (fieldOptions.type !== undefined) {\n            fieldType = fieldOptions.type;\n        }\n\n        this.fields.push({\n            name: fieldName,\n            type: fieldType.name,\n            options: fieldOptions,\n        });\n    }\n\n    getHiddenFields() {\n        return this.callHook('fields:hidden', this.fields.filter(field => field.options.hidden));\n    }\n\n    getVisibleFields() {\n        return this.callHook('fields:visible', this.fields.filter(field => !field.options.hidden));\n    }\n\n    addIndex(index: IPropertyIndex) {\n        this.indexes.push(index);\n    }\n\n    setConnection(db: Db) {\n        this.DB = db;\n        this.callHook('db:connected');\n    }\n\n    findField(name: string) {\n        return this.fields.find(field => {\n            if (field.name == name)\n                return true;\n            return false;\n        });\n    }\n\n    prepare() {\n\n        for (let inherited of this.inherits) {\n            let inheritedSchema: MongoSchema = inherited.getSchema();\n            for (let inheritedField of inheritedSchema.fields) {\n                // Skip fields. We allow overrides this way?\n                if (this.findField(inheritedField.name))\n                    continue;\n\n                this.fields.unshift(inheritedField);\n            }\n        }\n    }\n\n    collection(): Collection<any> {\n        return this.DB.collection(this.name);\n    }\n\n    createCollection() {\n        this.DB.createCollection(this.name, this.createOptions).then(result => {\n            this.callHook('collection:created');\n            for (let index of this.indexes) {\n                this.collection().createIndex(index.specification, {\n                    unique: index.unique,\n                    dropDups: true,\n                    w: 1\n                });\n            }\n            this.callHook('indexes:created');\n        });\n    }\n\n    registerHook(hookName: string, callback: any) {\n        this.hooks[hookName] = callback;\n    }\n\n    callHook(hookName: string, input?: any) {\n        if (this.hooks[hookName]) {\n            return this.hooks[hookName](input);\n        }\n        return input;\n    }\n\n    validate(document: object): SchemaValidationResult {\n        let validatingDocument = this.callHook('validate', document);\n\n        for (var field of this.fields) {\n            var error = SchemaValidator.validateField(field, validatingDocument[field.name]);\n            if (error) {\n                return error;\n            }\n        }\n\n        //SchemaValidator.ValidateDocument(document, this);\n    }\n\n};"]}